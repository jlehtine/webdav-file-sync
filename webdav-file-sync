#! /bin/sh

# webdav-file-sync
# Copyright (c) 2023 Johannes Lehtinen

# Stop on error
set -e

# Check if executed as an askpass script to access keyring
if [ -n "$SYNC_REMOTE_USER" -a -n "$SYNC_REMOTE_TARGET" ]; then
    case "$*" in
        'Username for '*)
            echo "$SYNC_REMOTE_USER"
            exit 0
            ;;
        'Password for '*)
            if [ -n "$SYNC_KEYRING_UTILITY" ]; then
                backendopt=
                if [ -n "$SYNC_KEYRING_BACKEND" ]; then
                    backendopt="-b $SYNC_KEYRING_BACKEND"
                fi
                exec "$SYNC_KEYRING_UTILITY" $backendopt get "$SYNC_REMOTE_TARGET" "$SYNC_REMOTE_USER"
            else
                exec "$SYNC_ASKPASS" "$@"
                exit $?
            fi
            ;;
    esac
fi

# Find script name
scriptdir="$(dirname "$0")"
scriptname="$(basename "$0")"

# Use secure umask
umask 077

# Show error and exit
error () {
    echo "ERROR: $*" 1>&2
    exit 1
}

# Prints help and exits
print_help () {
    cat <<EOS
usage: $scriptname [OPTIONS] COMMAND ARGS...

commands:
  help          print help and exit
  config        initialize and setup configuration
  auth          initialize keyring authencation
  sync          synchronize all configured files once
  sync FILE     synchronize the configured FILE once
  sync-repeat   synchronize all configured files repeatedly until killed
  put FILE      upload configured FILE overwriting any remote changes
  get FILE      download configured FILE overwriting any local changes

options:
  -h            print help and exit
  -v            be more verbose
  -c CONF       use configuration file CONF
  -o            overwrite the local changes on conflict during sync
  -O            overwrite the remote changes on conflict during sync
  -f            overwrite the remote or local changes without confirmation
  -L            do NOT use WebDAV locking when syncing
EOS
    exit 0
}

# Read options
conf=~/.webdav-file-sync.env
overwrite=
force=
skiplocking=
verbose=
while getopts 'hvc:oOfL' opt; do
    case "$opt" in
        h)
            print_help
            ;;
        v)
            verbose=true
            ;;
        c)
            conf="$OPTARG"
            ;;
        o)
            overwrite=local
            ;;
        O)
            overwrite=remote
            ;;
        f)
            force=true
            ;;
        L)
            skiplocking=true
            ;;
        '?')
            error "Unrecognized option (try -h for help)"
            ;;
    esac
done
shift $(( $OPTIND - 1 ))

# Read command
[ $# -ge 1 ] || error "Command not specified (try -h for help)"
cmd="$1"
shift

# Check the number of arguments to command
check_cmd_args () {
    if [ "$1" -lt "$2" ]; then
        error "Command arguments missing (try -h for help)"
    elif [ "$1" -gt "$3" ]; then
        error "Unexpected command arguments provided (try -h for help)"
    fi
}

# Check for required external tools
check_tools () {
    [ -z "$verbose" ] || echo 'Checking tools...'
    type wget > /dev/null 2>&1 || error "Required tools missing: wget"
    type lockfile-create > /dev/null 2>&1 || error "Required tools missing: lockfile-progs (lockfile-create, etc.)"
    if [ -n "$SYNC_REMOTE_USER" ]; then
        [ -z "$SYNC_KEYRING_UTILITY" ] || type "$SYNC_KEYRING_UTILITY" > /dev/null 2>&1 || error "Keyring utility not found or not executable: $SYNC_KEYRING_UTILITY (Python keyring)"
        [ -z "$SYNC_ASKPASS" ] || type "$SYNC_ASKPASS" > /dev/null 2>&1 || error "Credentials providing script not found or not executable: $SYNC_ASKPASS"
    fi
}

# Select specific configured file
select_file () {
    selectedfile="$1"
    echo "$selectedfile" | grep -q -E -x '[a-zA-Z0-9_]+' || error "Invalid file identifier: $selectedfile"
    eval filelocal=\"\${SYNC_FILE_$selectedfile}\"
    [ -n "$filelocal" ] || error "Missing configuration setting: SYNC_FILE_$selectedfile"
    [ "$filelocal" != "${filelocal#'/'}" ] || error "Absolute file path expected: SYNC_FILE_$selectedfile=$filelocal"
    eval fileremote=\"\${SYNC_FILE_${selectedfile}_REMOTE}\"
    fileremote="${fileremote#'/'}"
    if [ -z "$fileremote" ]; then
        fileremote="$(basename "$filelocal")"
    fi
    fileremote="$SYNC_REMOTE_BASE_URL$fileremote"
}

# Load configuration
load_configuration () {
    [ -z "$verbose" ] || echo 'Loading configuration...'

    # Check that file exists and is readable
    [ -f "$conf" ] || error "Configuration file not found (try -h for help): $conf"
    [ -r "$conf" ] || error "Configuration file is not readable: $conf"

    # Check that the file is safe to use
    if [ "$(find "$conf" \( -user "$(id -u)" -o -user 0 \) ! -perm /022 -print)" != "$conf" ]; then
        error "Configuration file must not be writable by other non-root users: $conf"
    fi

    # Set defaults
    SYNC_REPEAT_MINUTES=60
    SYNC_KEYRING_UTILITY=keyring
    SYNC_KEYRING_BACKEND=keyring.backends.SecretService.Keyring
    SYNC_ASKPASS=
    SYNC_STATE_DIR=~/.webdav-file-sync/state
    SYNC_BACKUP_DIR=~/.webdav-file-sync/backup
    SYNC_BACKUP_NUM=10
    SYNC_BACKUP_DAYS=30

    # Source configuration
    . "$conf"

    # Check configuration
    [ -n "$SYNC_REMOTE_BASE_URL" ] || error "Missing configuration setting: SYNC_REMOTE_BASE_URL"
    echo "$SYNC_REMOTE_BASE_URL" | grep -q -E '^https?://' || error "Invalid configuration value: SYNC_REMOTE_BASE_URL=$SYNC_REMOTE_BASE_URL"
    SYNC_REMOTE_BASE_URL="${SYNC_REMOTE_BASE_URL%'/'}/"
    [ -n "$SYNC_FILES" ] || error "Missing configuration setting: SYNC_FILES"
    for f in $SYNC_FILES; do
        select_file "$f"
    done

    # Export information required to access the credentials
    if [ -n "$SYNC_REMOTE_USER" ]; then
        [ -n "$SYNC_KEYRING_UTILITY" ] || [ -n "$SYNC_ASKPASS" ] || error "Invalid configuration, either keyring must be enabled or askpass must be specified."
        SYNC_REMOTE_TARGET="$(echo "$SYNC_REMOTE_BASE_URL" | sed -e 's/^\(https\?:\/\/[^/]*\)\(\/.*\)\?$/\1/')"
        export SYNC_REMOTE_USER SYNC_REMOTE_TARGET SYNC_KEYRING_UTILITY SYNC_KEYRING_BACKEND SYNC_ASKPASS
    fi
}

# Asks user for a password and outputs it
ask_password () {
    prompt="Password for $SYNC_REMOTE_USER at $SYNC_REMOTE_TARGET: "
    if [ -t 0 -a -t 2 ]; then
        passwd=
        printf '%s' "$prompt" 1>&2
        stty -echo
        read passwd || true
        printf '\n' 1>&2
        stty echo
        echo "$passwd"
        unset passwd
    elif [ -n "$SYNC_ASKPASS" ]; then
        "$SYNC_ASKPASS" "$prompt"
    elif type ssh-askpass > /dev/null 2>&1; then
        ssh-askpass "$prompt"
    elif type zenity > /dev/null 2>&1; then
        zenity --password --title="$prompt"
    else
        error "Can not use any method to request password"
    fi
}

# Do wget operation with standard options
wget_do () {

    # Authenticated requests
    if [ -n "$SYNC_REMOTE_USER" ]; then
        askpass="$(cd "$(dirname "$0")" && pwd)/$(basename "$0")"
        if [ -n "$locktoken" ]; then
            wget -q --user="$SYNC_REMOTE_USER" --use-askpass="$askpass" --header="Lock-Token: $locktoken" "$@" 3>&2
        else
            wget -q --user="$SYNC_REMOTE_USER" --use-askpass="$askpass" "$@" 3>&2
        fi

    # Unauthenticated requests
    else
        if [ -n "$locktoken" ]; then
            wget -q --header="Lock-Token: $locktoken" "$@"
        else
            wget -q "$@"
        fi
    fi
}

# Upload file to remote using PUT
webdav_put () {
    [ -z "$verbose" ] || echo "Uploading: $filelocal --> $fileremote"
    wget_do -t 3 -O /dev/null --method=PUT --body-file="$filelocal" "$fileremote" || return 1
    [ -z "$verbose" ] || echo 'Upload complete.'
}

# Download file from remote using GET
webdav_get () {
    [ -z "$verbose" ] || echo "Downloading: $fileremote --> $filelocal"
    tmpfile="$(mktemp "$(dirname "$filelocal")/.$(basename "$filelocal").XXXXXX")"
    wget_do -t 3 -O "$tmpfile" --method=GET "$fileremote" || return 1
    if [ -e "$filelocal" ]; then
        chmod --reference="$filelocal" "$tmpfile"
    fi
    mv "$tmpfile" "$filelocal"
    [ -z "$verbose" ] || echo 'Download complete.'
}

# Lock selected file
webdav_lock () {
    [ -z "$verbose" ] || echo "Locking: $fileremote"
    tmpfile="$(mktemp -t "$scriptname.XXXXXX")"
    wget_do -t 3 -O /dev/null -S --method=LOCK --header='Depth: 0' --header='Timeout: Second-300' --header='Content-Type: application/xml; charset="utf-8"' --body-data='<?xml version="1.0" encoding="utf-8" ?><D:lockinfo xmlns:D="DAV:"><D:lockscope><D:exclusive/></D:lockscope><D:locktype><D:write/></D:locktype></D:lockinfo>' "$fileremote" 2> "$tmpfile"
    ret=$?
    if [ $ret -eq 0 ]; then
        locktoken="$(cat "$tmpfile" | grep -E '^\s*Lock-Token:' | sed -e 's/^\s*Lock-Token:\s*//')"
    fi
    rm -f "$tmpfile"
    tmpfile=
    [ "$ret" -eq 0 -a -n "$locktoken" ] || return 1
}

# Unlock selected file
webdav_unlock () {
    local lt
    [ -n "$locktoken" ] || return 0
    [ -z "$verbose" ] || echo "Unlocking: $fileremote"
    lt="$locktoken"
    locktoken=
    wget_do -t 3 -O /dev/null --method=UNLOCK --header="Lock-Token: $lt" "$fileremote" || return 1
}

# Do syncing of selected file
webdav_sync () {
    [ -z "$verbose" ] || echo "Synchronizing: $filelocal <--> $fileremote"
    [ -n "$skiplocking" ] || webdav_lock || { echo "ERROR: Locking failed: $fileremote" 1>&2; return 1; }


    [ -n "$skiplocking" ] || webdav_unlock || echo "WARNING: Unlocking failed: $fileremote" 1>&2
}

# Command: print help
cmd_help () {
    check_cmd_args $# 0 0
    print_help
}

# Command: initialize configuration
cmd_config () {
    check_cmd_args $# 0 0
    check_tools

    # Check for existing configuration
    if [ -e "$conf" ]; then
        echo "Configuration file already exists: $conf"
        echo "Edit its contents as necessary or remove it to reinitialize."
        exit 0
    fi

    # Initialize a configuration file
    cat > "$conf" <<EOS
# $scriptname configuration file

# This file is sourced to shell when using the script.
# This file must not be writable by others to prevent command injection.

# The example values are commented out so that they are not used accidentally.
# Remove the preceding hash when setting them to a correct value.

# One or more files to be synchronized (mandatory)
# The short identifiers given in SYNC_FILES must be valid variable names.
# These identifiers are used as an argument to "sync", "put" or "get".
# If remote path is not specified then it is assumed to be the file basename. 
#SYNC_FILES='first second third'
#SYNC_FILE_first='/path/to/my/first file.txt'
#SYNC_FILE_second='/path/to/my/second file.pdf'
#SYNC_FILE_second_REMOTE='folder/second.pdf'
#SYNC_FILE_third='/path/to/my/third file.txt'
#SYNC_FILE_third_REMOTE='remote third.txt'

# How often to synchronize the files when doing sync-repeat (default value)
#SYNC_REPEAT_MINUTES=60

# Remote sync location base URL (mandatory)
#SYNC_REMOTE_BASE_URL='https://example.org/sync/root/'

# Remote user (optional, unauthenticated if not specified)
#SYNC_REMOTE_USER='myuser'

# The keyring utility to use as a password storage (default values)
# This is expected to be the Python keyring utility or have the same API.
# To disable keyring set the keyring utility to an empty value.
# If keyring is disabled then a password will be asked for each request.
# An empty backend value designates the default backend.
#SYNC_KEYRING_UTILITY=keyring
#SYNC_KEYRING_BACKEND=keyring.backends.SecretService.Keyring

# The askpass utility to use (optional, if keyring enabled)
# If specified then it will be used to ask the credentials when necessary.
# By default the credentials will be asked on the terminal.
#SYNC_ASKPASS=ssh-askpass

# The directories used for state and backup copies (default values)
#SYNC_STATE_DIR=~/.webdav-file-sync/state
#SYNC_BACKUP_DIR=~/.webdav-file-sync/backup

# Minimum number of backup copies kept per file (default value)
#SYNC_BACKUP_NUM=10

# How long to keep backup copies in days (default value)
#SYNC_BACKUP_DAYS=30
EOS
    echo "Example configuration file was created: $conf"
    echo "Edit its contents as necessary."
    echo "Then run \"$scriptname auth\" if you want to setup keyring authentication."
}

# Command: auth
cmd_auth () {
    check_cmd_args $# 0 0
    load_configuration
    check_tools
    [ -n "$SYNC_REMOTE_USER" ] || error "To use authenticated requests, set SYNC_REMOTE_USER in configuration: $conf"
    [ -n "$SYNC_KEYRING_UTILITY" ] || error "To use keyring authentication, set SYNC_KEYRING_UTILITY in configuration: $conf"
    backendopt=
    if [ -n "$SYNC_KEYRING_BACKEND" ]; then
        backendopt="-b $SYNC_KEYRING_BACKEND"
    fi
    ask_password | "$SYNC_KEYRING_UTILITY" $backendopt set "$SYNC_REMOTE_TARGET" "$SYNC_REMOTE_USER"
}

# Command: sync
cmd_sync () {
    local f
    check_cmd_args $# 0 1
    load_configuration
    check_tools
    if [ $# -ge 1 ]; then
        select_file "$1"
        webdav_sync || error "Synchronization failed: $1"
    else
        errors=
        for f in $SYNC_FILES; do
            select_file "$f"
            webdav_sync || {
                echo "ERROR: Synchronization failed: $f" 1>&2
                errors=true
            }
        done
        [ -z "$errors" ] || error "Synchronization failed for one or more files"
    fi
}

# Command: put file to remote
cmd_put () {
    check_cmd_args $# 1 1
    load_configuration
    check_tools
    select_file "$1"
    webdav_put || error "Upload failed"
}

# Command: get file from remote
cmd_get () {
    check_cmd_args $# 1 1
    load_configuration
    check_tools
    select_file "$1"
    webdav_get || error "Download failed"
}

# Cleanup for temporary files and directories
tmpdir=
tmpfile=
locktoken=
trap '[ -z "$locktoken" ] || webdav_unlock; [ -z "$tmpdir" ] || rm -rf "$tmpdir"; [ -z "$tmpfile" ] || rm -f "$tmpfile"' 0

# Perform the command
case "$cmd" in

    help|config|auth|sync|put|get)
        "cmd_$cmd" "$@"
        ;;

    *)
        error "Unknown command: $cmd, try -h for help"
        ;;
esac
